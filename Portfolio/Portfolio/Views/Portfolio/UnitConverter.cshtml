
@{
    ViewData["Title"] = "UnitConverter";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container-fluid">
    <div class="container-fluid">
        <div class="col-lg-6">
            <div class="viewTitle">Unit Converter - Client Side</div>
            <hr />
            <div class="viewHeader"> Goal: </div>
            <div class="viewBody"> To create a client side website for converting between various units of measure.</div>
            <div class="viewHeader"> Focus: </div>
            <div class="viewBody"> To practice using HTML, CSS, JavaScipt with Bootstrap and Vue front end frameworks to create a client side website</div>
            <div class="viewHeader">Team Members: </div>
            <div class="viewBody">Emily Cebasek, Kevin Adams, and Thomas Harmeyer.</div>
            <div class="viewHeader">GitHub Repository: </div>
            <a type="button" class="btn btn-info btn-md" href="https://github.com/ZachKubinski/UnitConverter.git"> LINK </a>
            <h />
        </div>
        <div class="col-lg-6">
            <div class="viewTitle">Unit Converter - Server Side</div>
            <hr />
            <div class="viewHeader"> Goal: </div>
            <div class="viewBody"> To refactor our client side application into a server side application.</div>
            <div class="viewHeader"> Focus: </div>
            <div class="viewBody"> To practice using the MVC Framework with Controllers and CSHTML with Razor Code.</div>
            <div class="viewHeader">Team Members: </div>
            <div class="viewBody">Emily Cebasek, Kevin Adams, and Thomas Harmeyer.</div>
            <div class="viewHeader">GitHub Repository: </div>
            <a type="button" class="btn btn-info btn-md" href="https://github.com/ZachKubinski/UnitConverterMVC.git"> LINK </a>
            <hr />
        </div>
    </div>
    <hr />
    <div>
        <div class="container-fluid">
            <h3>Directions: </h3>
            <!-- Modal Button -->
            <button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#myModal">Unit Converter Problem - MCV</button>
            <!-- Modal -->
            <div id="myModal" class="modal fade" role="dialog">
                <div class="modal-dialog">
                    <!-- Modal Content-->
                    <div class="modal-content" style="width:750px; margin-left: -13.5%;">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal">&times;</button>
                            <h4 class="modal-title">Unit Converter Problem - MCV</h4>
                        </div>
                        <div class="modal-body">
                            <pre class="reflection">
As a team, create a wensite for converting between measurement systems. The 
web pages should handle the unit conversion on the client side using 
JavaScript. Create a style tile and a mockup of your design using digital 
tools. Present your style tile and mockup to Mr. O. Use proper source control 
and workflow practies to build your site. This site/pages should be user 
friendly and have more than just a single text box.

Style Tile:
    Web Page(s): Colors and Navigation.
    Text: Font, Text sizes, and Colors.

Mock Up:
    Navigation location, function and how to work unit converters.
                        </pre>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="container-fluid">
        <div class="col-lg-6">
            <h3>Mockup using Moqup: </h3>
            <img class="img-responsive" src="~/images/UnitConverterMockup.png" />
        </div>
        <div class="col-lg-6">
            <h3>Style Tile: </h3>
            <img class="img-responsive" src="~/images/UnitConverterStyleTile.JPG" />
        </div>
    </div>
    <hr />
    <div class="container-fluid">
        <div class="col-lg-6">
            <div class="flip btn btn-info btn-md">Reflection - Client Side: </div>
            <div class="panel">
                <pre class="reflection">
The breaking up of the Client-Side and Server-Side 
portions of the Unit Converter project was helpful 
when learning HTML, CSS, and especially JavaScript. 
We were able to widen bottle necks in work by pair 
programming on essential portions of the project. 
We used w3schools.com as well as moqups.com to our 
advantage so we could focus on making our project look 
good and have a great user experience. Our plan for 
workflow included making an index page first to use as 
a template for the other pages. This proved to be 
useful for styling all the other pages but created a 
bottle neck as we decided to wait to add the JavaScript 
until the index view’s HTML and CSS was copied over to 
our other blank views for individual alterations.
                    </pre>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="flip2 btn btn-info btn-md">Reflection: - Server Side: </div>
            <div class="panel2">
                <pre class="reflection">
Creating only one controller for this project made it 
more difficult for all members of the team to learn and 
practice writing code for the controller. It also 
bottlenecks the workflow in a team since generally one 
to two people must work on the controller before 
implementing the views due to their reliance on the 
controller. However, splitting up the controller from 
the rest of the lower layers of the stack allowed for 
space to learn about controllers and how razor code 
operates in a .cshtml file. Although the best uses for 
razor code were highlighted before the activity, I got 
the impression that razor code may still be an enigma 
for some and could be better studied with individual 
activities that reinforce the learning of razor code. 
Overall the Unit Converter project was a great 
opportunity to learn the basics of MVC while 
intentionally omitting the service, repository and 
database layers.
                    </pre>
            </div>
        </div>
    </div>
</div>

